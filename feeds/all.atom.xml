<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jjriv</title><link href="https://jjriv.com/" rel="alternate"></link><link href="https://jjriv.com/feeds/all.atom.xml" rel="self"></link><id>https://jjriv.com/</id><updated>2024-10-15T00:00:00-07:00</updated><entry><title>Why Keeping DNS Records Current is Important</title><link href="https://jjriv.com/articles/keep-dns-records-current-to-prevent-subdomain-attacks/" rel="alternate"></link><published>2024-10-15T00:00:00-07:00</published><updated>2024-10-15T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-10-15:/articles/keep-dns-records-current-to-prevent-subdomain-attacks/</id><summary type="html">&lt;p&gt;Learn why keeping DNS records current is necessary to prevent attackers from taking over a subdomain.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;Managing DNS records can be a slow and cumbersome process. Most often, you&amp;rsquo;re stuck maintaining them using the web interface provided by the DNS vendor. The more domains and DNS records you manage, the higher the probability that one or more entries will be neglected. Here&amp;rsquo;s why it&amp;rsquo;s important to keep your DNS records current and prevent a subdomain takeover attack. &lt;/p&gt;
&lt;h2&gt;What is Subdomain Takeover Attack?&lt;/h2&gt;
&lt;p&gt;A DNS record becomes stale when the resource it points to is no longer under your control. The A record is the most common type of these "dangling" DNS misconfigurations found in the wild. DNS A records that point to an IP address belonging to a hosting service with a high turnover rate, such as Digital Ocean or Linode, are much more susceptible to a &lt;a href="https://blog.apnic.net/2019/01/09/be-careful-where-you-point-to-the-dangers-of-stale-dns-records/"&gt;subdomain takeover attack&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For example, you may have set up a test copy of your web site using the subdomain test.example.com and created a DNS A record pointed at a Linode VM. But, you forgot to delete the DNS record after completing your test and destroying the VM. &lt;/p&gt;
&lt;p&gt;The hosting company is going to reallocate that IP address to another resource in the near future. If the new owner of the IP address has ill intentions, your domain&amp;rsquo;s reputation is in danger.&lt;/p&gt;
&lt;h2&gt;How is a stale DNS record discovered?&lt;/h2&gt;
&lt;p&gt;To exploit a stale DNS record, the attacker has to do a bit of fishing. The first step is to create a virtual machine, which will be allocated an IP address. &lt;/p&gt;
&lt;p&gt;The second step is to set up a web server and monitor web traffic. A basic out-of-the-box web site configuration is all that is needed. Because the attacker doesn&amp;rsquo;t care what web page is served up. They only care about what shows up in the logs. &lt;/p&gt;
&lt;p&gt;Once the VM and web server are up and running, they simply monitor the logs and wait for something to pop up. All it takes is one request &amp;mdash; from a bot, a probe, or a random google search &amp;mdash; for the attacker to discover the subdomain pointed at their IP address.&lt;/p&gt;
&lt;p&gt;With VMs costing as little as $5 per month, it&amp;rsquo;s quite easy for an attacker to spin up several VMs and leave them monitoring multiple IP addresses for a few days. If the web server logs don't show any hits after a few days, they simply destroy the VM, create a new one, and move on to another IP. &lt;/p&gt;
&lt;h2&gt;How is a stale DNS record exploited?&lt;/h2&gt;
&lt;p&gt;Now that the attacker has access to a web server receiving traffic directed at one of your subdomains, they can set up their own web site that piggybacks on the reputation of your domain. The first thing they will do is create a free SSL certificate using a service like &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. This increases the legitimacy of whatever content they decide to host. &lt;/p&gt;
&lt;p&gt;Next, they&amp;rsquo;ll upload the contents of the web site that will be masquerading under your subdomain. For example, they could create a form that mimics your web site to trick visitors into entering personal information. The unsuspecting visitors will have no idea the information they submit is being delivered to a nefarious third party.&lt;/p&gt;
&lt;p&gt;Another thing they could do is upload a slew of spammy content, verify the subdomain with google, and submit it for indexing. Anyone searching on google, will see the subdomain as being reputable and therefore more likely to click on the results that appear during their search. &lt;/p&gt;
&lt;h2&gt;How to keep DNS records from going stale&lt;/h2&gt;
&lt;p&gt;The solution is to regularly audit your DNS records and identify any subdomains that are no longer in use. Before you delete them, however, make sure the subdomain isn&amp;rsquo;t already being exploited. If it is, it may be necessary to repoint the record to an IP you control to reclaim ownership of the subdomain. &lt;/p&gt;
&lt;p&gt;The final step is to delete any stale DNS records that you find during your audit. &lt;/p&gt;
&lt;p&gt;Another solution that helps is to enable Google Search Console for your domains and configure it to alert you if anyone claims authority over one of your subdomains.&lt;/p&gt;</content><category term="articles"></category><category term="DNS"></category></entry><entry><title>Using Python to Find an Available Seat for the SAT</title><link href="https://jjriv.com/articles/python-sat-seat-availability/" rel="alternate"></link><published>2024-10-10T00:00:00-07:00</published><updated>2024-10-10T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-10-10:/articles/python-sat-seat-availability/</id><summary type="html">&lt;p&gt;Trying to register for the SAT but there&amp;rsquo;s no availability? Here&amp;rsquo;s how to find a seat using Python.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;My son recently took the SAT at our local high school. In the months leading up to the test, reserving a seat for him turned out to be quite the challenge. Several high schools in nearby cities had to cancel their SAT testing, which led to a surge in demand for seats at our local testing sites. Reservations at the &lt;a href="https://satsuite.collegeboard.org/sat/test-center-search"&gt;SAT Test Center web site&lt;/a&gt; filled up only minutes after being released. &lt;/p&gt;
&lt;p&gt;If we wanted to reserve a seat, we would need to know immediately when they released more, or, if someone cancelled. This seemed like an easy problem to solve using Python. &lt;/p&gt;
&lt;p&gt;Since Python is installed by default with most Linux distributions, it&amp;rsquo;s the perfect candidate for automating simple tasks like this. After spinning up a &lt;a href="https://linode.com"&gt;Linode&lt;/a&gt; Nanode, I created a script that would check seat availability and send an email notification if one was available, then scheduled it as a cron. &lt;/p&gt;
&lt;h2&gt;How it Works&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#/usr/bin/python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://aru-test-center-search.collegeboard.org/prod/test-centers?date=2024-08-24&amp;amp;zip=xxxxx&amp;amp;country=US&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;mailfrom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;me@example.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;sitecode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;08239&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;#query a list of sites and convert the response to json&lt;/span&gt;
&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#loop through results&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;#if site code matches my test location&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sitecode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;#if a seat is available&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seatAvailability&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;#send alerts&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;From: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mailfrom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;To: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Subject: SAT seat available!&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://satsuite.collegeboard.org/sat/test-center-search&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailfrom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;#we are only interested in our local site, so we break out of the loop&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Step 1: Add your test date and zip code to the URL&lt;/h4&gt;
&lt;p&gt;When you visit the web site to reserve a seat, it makes an asynchronous call to an API, which returns a JSON string. Using devtools, I was able to extract the URL. Make sure your URL includes the date you want to test and your zip code. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;url = &amp;#39;https://aru-test-center-search.collegeboard.org/prod/test-centers?date=2024-08-24&amp;amp;zip=90210&amp;amp;country=US&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Find your site code&lt;/h3&gt;
&lt;p&gt;To find your site code, you will need to dig through the JSON response from the above URL. Search for the name of the testing location, then find the code. The key for this value is "code" and the value will be a five digit number. Once you have that code, plug it in to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sitecode = &amp;quot;08239&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Enter the email address(es) where you want to be notified&lt;/h3&gt;
&lt;p&gt;I configured the script to notify both my wife and I, to increase our chances of quickly responding to a seat being made available. Enter one or more email addresses into this array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;alert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;jane@example.com&amp;#39;,&amp;#39;john@example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Schedule the cron&lt;/h3&gt;
&lt;p&gt;Don&amp;rsquo;t forget this last step! The &lt;a href="https://www.geeksforgeeks.org/crontab-in-linux-with-examples/"&gt;Linux crontab&lt;/a&gt; is a simple but powerful utility for scheduling jobs. Each user on a Linux system can create and maintain their own crontab file using the &lt;code&gt;crontab -e&lt;/code&gt; command. I created the following job to run every minute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt; * &lt;span class="gs"&gt;* *&lt;/span&gt; * /home/jjriv/sat-seat-finder.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;That&amp;rsquo;s it!&lt;/h3&gt;
&lt;p&gt;Your work is done. Sit back and relax. But don&amp;rsquo;t forget to check your inbox. &lt;/p&gt;</content><category term="articles"></category><category term="Linux"></category><category term="Python"></category></entry><entry><title>How to Configure OpenDKIM with Postfix</title><link href="https://jjriv.com/articles/opendkim-postfix-configuration/" rel="alternate"></link><published>2024-06-27T00:00:00-07:00</published><updated>2024-06-27T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-06-27:/articles/opendkim-postfix-configuration/</id><summary type="html">&lt;p&gt;If you send email from a Postfix mail server, configuring OpenDKIM is necessary to authenticate your domain. Without it, email providers like Gmail and Yahoo will junk or reject your emails. Here&amp;rsquo;s how to set it up.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;If you send email from a Postfix mail server, configuring OpenDKIM is one of two methods available to authenticate your domain (the other is SPF). Why is authenticating your domain important? Because, email providers like Gmail and Yahoo will junk or reject unauthenticated emails. Here&amp;rsquo;s how to set up OpenDKIM in Ubuntu. &lt;/p&gt;
&lt;h3&gt;What is DKIM?&lt;/h3&gt;
&lt;p&gt;DKIM, or DomainKeys Identified Mail, is an email authentication method used to prove ownership of your domain. It works by embedding a digital signature in your outgoing emails which lets the receiver know that the message was sent and authorized by you. To verify the authenticity of the email, the embedded signature is checked against a public key published in your domain&amp;rsquo;s DNS records.&lt;/p&gt;
&lt;h3&gt;Step 1: Install OpenDKIM&lt;/h3&gt;
&lt;p&gt;Use the apt package manager to install opendkim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;opendkim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Update the opendkim configuration file&lt;/h3&gt;
&lt;p&gt;Edit the &lt;code&gt;/etc/opendkim.conf&lt;/code&gt; file and change the following settings. The TrustedHosts, KeyTable, and SigningTable are explained later in this article. The Mode setting selects the operating mode. In this case, we set it to 's' for signer, as we are using opendkim to sign outgoing emails. The Socket setting specifies the socket that should be established by opendkim to receive connections from postfix. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Mode&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;InternalHosts&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;refile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TrustedHosts&lt;/span&gt;
&lt;span class="n"&gt;ExternalIgnoreList&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;refile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TrustedHosts&lt;/span&gt;
&lt;span class="n"&gt;KeyTable&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;refile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;KeyTable&lt;/span&gt;
&lt;span class="n"&gt;SigningTable&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;refile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SigningTable&lt;/span&gt;
&lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Create a TrustedHosts file&lt;/h3&gt;
&lt;p&gt;Edit the &lt;code&gt;/etc/opendkim/TrustedHosts&lt;/code&gt; file and include the IP addresses of the hosts that are allowed to use the keys to sign emails. Assuming that the opendkim service is running on the same host as postfix, only the localhost IP and hostname need to be included.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Generate a key&lt;/h3&gt;
&lt;p&gt;In this step you need to generate a key and add it to DNS for verifying DKIM. First, create a directory where you will store your keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir /etc/opendkim/keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, create the keys using the &lt;code&gt;opendkim-genkey&lt;/code&gt; command. Enter your domain name after the domain (-d) parameter and the key name after the selector (-s) parameter. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;opendkim-genkey -d example.com -s mydkimkey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The selector name entered above is what will be used to look up the key in your DNS record. The command we ran above will create the DNS record in &lt;code&gt;/etc/opendkim/keys/mydkimkey.txt&lt;/code&gt; and it should look something like below. Go ahead and create the DNS TEXT record for your domain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mydkimkey._domainkey  IN      TXT     ( &amp;quot;v=DKIM1; k=rsa; &amp;quot;
          &amp;quot;p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQK…&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Create the KeyTable file&lt;/h3&gt;
&lt;p&gt;The KeyTable file contains the selector/domain pair and the path to your private key. It tells opendkim where to find the correct keys for signing outgoing email. First, create the file and give it proper permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch /etc/opendkim/KeyTable
chmod 0640 /etc/opendkim/KeyTable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then add the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mydkimkey._domainkey.example.com example.com:mydkimkey:/etc/opendkim/keys/mydkimkey.private
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 5: Create the SigningTable file&lt;/h3&gt;
&lt;p&gt;The SigningTable file tells opendkim which selector to use for the declared domains and email addresses.   First, create the file and give it proper permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch /etc/opendkim/SigningTable
chmod 0640 /etc/opendkim/SigningTable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We want to use the same selector for the entire domain, so we denote that by adding the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;@example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mydkimkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_domainkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 6: Create directory for socket and set up perms&lt;/h3&gt;
&lt;p&gt;This step is necessary because postfix and opendkim need to communicate via unix sockets. Opendkim must be able to create the socket, and postfix must be able to read it. First, we add the user postfix to the opendkim group using the &lt;code&gt;usermod&lt;/code&gt; command. Then, we create the socket directory owned by the user opendkim and the group postfix. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;usermod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;aG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;
&lt;span class="n"&gt;chown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spool&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opendkim&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 7: Update postfix config with opendkim information&lt;/h3&gt;
&lt;p&gt;In this step, we use the &lt;code&gt;postconf&lt;/code&gt; command to add configuration options, like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;postconf -e &amp;#39;smtpd_milters = local:opendkim/opendkim.sock&amp;#39;
postconf -e &amp;#39;non_smtpd_milters = $smtpd_milters&amp;#39;
postconf -e &amp;#39;milter_default_action = accept&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 8: Restart postfix and opendkim&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;postfix
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;opendkim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Verify that it&amp;rsquo;s working&lt;/h3&gt;
&lt;p&gt;There are two ways you can verify that your email is now signing outbound emails with a dkim signature. &lt;/p&gt;
&lt;p&gt;The first way is to simply send yourself an email. Once you've received it, copy the headers and paste them into the &lt;a href="https://mxtoolbox.com/EmailHeaders.aspx"&gt;mxtoolbox&lt;/a&gt; utility to analyze them. This is the most thorough way to validate your opendkim setup, as it will validate that the emails are signed correctly by your mail server and authenticated correctly by the receiving mail server. &lt;/p&gt;
&lt;p&gt;The second way is to check your mail logs. You should see the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Oct 20 00:01:02 myhost opendkim[695]: 4ABBCC1AFA: DKIM-Signature field added (s=mydkimkey, d=example.com)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="Linux"></category><category term="Ubuntu"></category><category term="Postfix"></category></entry><entry><title>Linux Commands for Web Developers</title><link href="https://jjriv.com/articles/web-development-basic-linux/" rel="alternate"></link><published>2024-06-13T00:00:00-07:00</published><updated>2024-06-13T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-06-13:/articles/web-development-basic-linux/</id><summary type="html">&lt;p&gt;It is the responsibility of web developers to understand how their code is impacting the server environment. Here are a few essential commands to gauage your impact.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;Having worked in full stack web development and DevOps for over two decades, I&amp;rsquo;ve experienced my fair share of launches going pear shaped. The following is an overview of Linux commands that have become indispensable in troubleshooting and measuring a web application&amp;rsquo;s impact on its hosting environment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Most of these commands are installed by default with popular Linux distributions. However, you may have to install one or two of them.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;htop&lt;/h3&gt;
&lt;h5&gt;The eye in the sky&lt;/h5&gt;
&lt;p&gt;The htop utility provides an interactive overview of every server resource, including CPU, memory, load, and more.  It&amp;rsquo;s the first place I go to when troubleshooting an issue.&lt;/p&gt;
&lt;p&gt;To start htop, simply type &lt;code&gt;htop&lt;/code&gt; in the terminal window. The visual display will include a list of running processes which can be sorted by clicking on any column heading. &lt;/p&gt;
&lt;p&gt;Sorting on the CPU and MEM columns will show what&amp;rsquo;s consuming the most resources. If CPU is pinned by your web application, you will see that at the top of the list. If needed, you can terminate the process by pressing F9 on your keyboard. Here&amp;rsquo;s what htop looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of htop" src="https://jjriv.com/images/htop.png"&gt;&lt;/p&gt;
&lt;p&gt;The main thing you want to keep your eye on is Load average and Swap. If load gets too high it will slow down your server. If memory and swap get maxed out, the server will simply start killing processes on its own to free up memory, which you really want to avoid. &lt;/p&gt;
&lt;h3&gt;ps&lt;/h3&gt;
&lt;h5&gt;Zeroing in on currently running processes&lt;/h5&gt;
&lt;p&gt;The ps command provides the same list of processes we saw when using htop. Accessing this list directly from the command line gives us some additional capabilities.&lt;/p&gt;
&lt;p&gt;I have two use cases for ps. The first is to find out how many web server or proxy processes are running. For example, troubleshooting Apache often requires knowing whether or not it&amp;rsquo;s over worked. &lt;/p&gt;
&lt;p&gt;To see how many Apache procs are running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;aux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;apache
&lt;span class="m"&gt;13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since ps will produce one line per process, we can find out how many procs are running by piping the result through grep. If the number of processes is higher than expected, we know there&amp;rsquo;s an issue.&lt;/p&gt;
&lt;p&gt;The second use case is finding out whether or not a specific process is running, and if so, how long it&amp;rsquo;s been running. For example, let say we wanted to check in on a scheduled job running as a cron. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume our web application has a component that sends email notifications. The command below will determine whether or not it&amp;rsquo;s running, and if so, for how long. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;aux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;mailer
www-data&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1468100&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;754888&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;8272&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;?&lt;span class="w"&gt;        &lt;/span&gt;Sl&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;:59&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;:24&lt;span class="w"&gt; &lt;/span&gt;/var/www/site/app/cron/mailer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above, the first timestamp &lt;code&gt;03:59&lt;/code&gt; is the time the command was started. &lt;/p&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;h5&gt;Editing files directly on the server&lt;/h5&gt;
&lt;p&gt;While troubleshooting an issue it may become necessary to edit files on the production server. It&amp;rsquo;s not advisable to do so, but, sometimes it is the only way to isolate an issue. The vim text editor enables us to edit files in production, and is similar to other editors such as emacs, nano, and vi. &lt;/p&gt;
&lt;p&gt;I recommend making a backup copy of the file before you edit it. Also, you will want to refer to a &lt;a href="https://opensource.com/article/19/3/getting-started-vim"&gt;getting started guide&lt;/a&gt; for a list of commands.&lt;/p&gt;
&lt;p&gt;To edit a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;vim&lt;span class="w"&gt; &lt;/span&gt;/var/www/site/app/config/mail.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;curl&lt;/h3&gt;
&lt;h5&gt;Web requests from the command line&lt;/h5&gt;
&lt;p&gt;The curl command is most useful for sending requests to the web application and analyzing the response. It can be used to analyze the contents of a web page to see how it&amp;rsquo;s being rendered. More importantly, however, we can use it to look at the response headers.&lt;/p&gt;
&lt;p&gt;Here is an example of using curl to send a request to a web page to check that a redirect is working properly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;http://jjriv.com
HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;301&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Moved&lt;span class="w"&gt; &lt;/span&gt;Permanently
Date:&lt;span class="w"&gt; &lt;/span&gt;Fri,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jun&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;:40:01&lt;span class="w"&gt; &lt;/span&gt;GMT
Content-Type:&lt;span class="w"&gt; &lt;/span&gt;text/html
Content-Length:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;167&lt;/span&gt;
Connection:&lt;span class="w"&gt; &lt;/span&gt;keep-alive
Cache-Control:&lt;span class="w"&gt; &lt;/span&gt;max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3600&lt;/span&gt;
Expires:&lt;span class="w"&gt; &lt;/span&gt;Fri,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jun&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;:40:01&lt;span class="w"&gt; &lt;/span&gt;GMT
Location:&lt;span class="w"&gt; &lt;/span&gt;https://jjriv.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the response includes the 301 redirect header. The response also includes the Location header, which instructs the web browser where to redirect to.&lt;/p&gt;
&lt;h3&gt;iostat&lt;/h3&gt;
&lt;h5&gt;How is the web app impacting disk?&lt;/h5&gt;
&lt;p&gt;If your web application is connecting to a database you&amp;rsquo;ll want to know how the SQL queries are affecting the database server. The &lt;code&gt;iostat&lt;/code&gt; command will show us how much of the disk I/O is being utilized at that moment. Databases are bound by disk, meaning they can only perform as fast as they can access the data on the disk (until the cache kicks in). If the query is causing too much I/O on the database server&amp;rsquo;s disks, it will need to be optimized. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not uncommon for a database server to respond differently to queries in staging versus production. PostgreSQL, for example utilizes a query planner that adapts to the amount of data in the database. Just because a query performed well in staging does not mean it will perform the same in production.&lt;/p&gt;
&lt;p&gt;The following command will show I/O stats for all disks on the server, including the percentage of time each disk is busy (%util). The integer 1 tells the command to refresh every one second, so we can monitor the disk usage in real time. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;iostat&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-x
Linux&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.15.0-100-generic&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;w1sc.pelagodesign.com&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;06&lt;/span&gt;/17/2024&lt;span class="w"&gt;      &lt;/span&gt;_x86_64_&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;CPU&lt;span class="o"&gt;)&lt;/span&gt;

Device&lt;span class="w"&gt;            &lt;/span&gt;r/s&lt;span class="w"&gt;     &lt;/span&gt;rkB/s&lt;span class="w"&gt;   &lt;/span&gt;rrqm/s&lt;span class="w"&gt;  &lt;/span&gt;%rrqm&lt;span class="w"&gt; &lt;/span&gt;r_await&lt;span class="w"&gt; &lt;/span&gt;rareq-sz&lt;span class="w"&gt;     &lt;/span&gt;w/s&lt;span class="w"&gt;     &lt;/span&gt;wkB/s&lt;span class="w"&gt;   &lt;/span&gt;wrqm/s&lt;span class="w"&gt;  &lt;/span&gt;%wrqm&lt;span class="w"&gt; &lt;/span&gt;w_await&lt;span class="w"&gt; &lt;/span&gt;wareq-sz&lt;span class="w"&gt;     &lt;/span&gt;d/s&lt;span class="w"&gt;     &lt;/span&gt;dkB/s&lt;span class="w"&gt;   &lt;/span&gt;drqm/s&lt;span class="w"&gt;  &lt;/span&gt;%drqm&lt;span class="w"&gt; &lt;/span&gt;d_await&lt;span class="w"&gt; &lt;/span&gt;dareq-sz&lt;span class="w"&gt;     &lt;/span&gt;f/s&lt;span class="w"&gt; &lt;/span&gt;f_await&lt;span class="w"&gt;  &lt;/span&gt;aqu-sz&lt;span class="w"&gt;  &lt;/span&gt;%util
sda&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.24&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.81&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.06&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.99&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.39&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.92&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.70&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;.24&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.07&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;.32&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.54&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.86&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.62&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;920&lt;/span&gt;.55&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.40&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.16&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above command uses the &lt;code&gt;-d&lt;/code&gt; option to show only disk activity (excludes CPU) and the &lt;code&gt;-x&lt;/code&gt; option to include extended stats including &lt;code&gt;%util&lt;/code&gt;. If the disk is slowing down the database utlization will be upwards of 100%. &lt;/p&gt;
&lt;h3&gt;grep&lt;/h3&gt;
&lt;h5&gt;Search log files for specific strings&lt;/h5&gt;
&lt;p&gt;If you have an idea of what you&amp;rsquo;re looking for, grep can help you find it faster. The &lt;code&gt;grep&lt;/code&gt; command takes a keyword and filename as it&amp;rsquo;s arguments, and shows you the lines of the file where that keyword reside.&lt;/p&gt;
&lt;p&gt;The following example searches an apache log file for an IP address and shows us the lines in which it appears.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.3.7&lt;span class="w"&gt; &lt;/span&gt;/var/log/apache2/access.log
&lt;span class="m"&gt;192&lt;/span&gt;.168.3.7&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;/Jun/2024:16:42:20&lt;span class="w"&gt; &lt;/span&gt;-0700&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;34097&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://jjriv.com/&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.3.7&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;/Jun/2024:12:48:18&lt;span class="w"&gt; &lt;/span&gt;-0700&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;301&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15&lt;/span&gt;
&lt;span class="s2"&gt;_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;more, less, tail&lt;/h3&gt;
&lt;h5&gt;Sifting through haystacks&lt;/h5&gt;
&lt;p&gt;When a web application is not behaving as expected we can often find out why by looking at logs on the server. For example, web server logs can tell us if the code is triggering internal server errors or not. Looking at database logs can tell us which queries are taking too long or producing errors. The more, less, and tail commands are all useful for combing through log files. &lt;/p&gt;
&lt;h6&gt;more&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;more&lt;/code&gt; command will display the contents of a file one page at a time. It&amp;rsquo;s more rudimentary compared to the others but can be useful for quickly skimming files. A practical usage case is to combine it with the previously mentioned &lt;code&gt;grep&lt;/code&gt; command, to paginate the results of a file search. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;proxy&lt;span class="w"&gt; &lt;/span&gt;/var/log/apache2/error.log&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example above searches the error log for any problems related to apache proxying requests to another server, such as FastCGI. &lt;/p&gt;
&lt;h6&gt;less&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;less&lt;/code&gt; command is similar to &lt;code&gt;more&lt;/code&gt;, however, it let&amp;rsquo;s you search for keywords and scroll back through previous pages. It&amp;rsquo;s a more interactive version of &lt;code&gt;more&lt;/code&gt;. I guess you could say &lt;code&gt;less&lt;/code&gt; is &lt;code&gt;more&lt;/code&gt; 😁&lt;/p&gt;
&lt;p&gt;To go through a file one page at a time using &lt;code&gt;less&lt;/code&gt;, run the following command. To search within the resutls, type &lt;code&gt;/&lt;/code&gt; and then the keyword to search. Use the page down and page up keys to progress forward and backward. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;less&lt;span class="w"&gt; &lt;/span&gt;/var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6&gt;tail&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;tail&lt;/code&gt; command is most useful for viewing recent entries in a file, especially if you use the &lt;code&gt;-f&lt;/code&gt; parameter to continuously tail a file. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also combine it with grep to continuously monitor for error messages as they appear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="articles"></category><category term="Linux"></category><category term="Ubuntu"></category><category term="Web Development"></category></entry><entry><title>A Simple Guide to Configuring and Hardening Ubuntu Server</title><link href="https://jjriv.com/articles/ubuntu-simple-configuration-hardening/" rel="alternate"></link><published>2024-06-04T00:00:00-07:00</published><updated>2024-06-04T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-06-04:/articles/ubuntu-simple-configuration-hardening/</id><summary type="html">&lt;p&gt;This tutorial covers the bare minimum configuration and hardening you should apply to any new Ubuntu server.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;When you deploy a new Ubuntu server the default installation is not sufficient enough to protect it from getting compromised. This is especially true if you are using a popular cloud provider such as &lt;a href="https://linode.com"&gt;Linode&lt;/a&gt; or &lt;a href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt;. Hackers are known to monitor the IP addresses they own, like sharks circling a reef looking for easy prey. Your newly created server will start getting scanned for vulnerabilities and sprayed with login attempts the moment it comes online. &lt;/p&gt;
&lt;p&gt;This tutorial teaches you how to configure and harden Ubuntu server in a few simple steps. The purpose of this guide is to create a baselined server from which you can build your project. &lt;/p&gt;
&lt;h3&gt;Step 1: Create Your User Account&lt;/h3&gt;
&lt;p&gt;The first thing to do is to create a non root user you can use to log in to the server. Run the following command and answer each of the prompts. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;adduser jjriv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Give your account to have sudo access so that it can run commands as root. This is necessary so that you can configure the server and install software without directly accessing the root account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;usermod -aG sudo jreeve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Create and Install your SSH Key&lt;/h3&gt;
&lt;p&gt;The problem with password based authentication is that it&amp;rsquo;s too easy for hackers to guess your password. It&amp;rsquo;s better to use a SSH key, which is a lot like a key you would use to unlock a door. Unless you have the right key, the server won't let you in. &lt;/p&gt;
&lt;p&gt;To create the key pair, run the following command on the server from which you&amp;rsquo;ll be connecting. Follow the prompts, giving your key a unique name to distinguish it from other keys you might have already created. When prompted for a passphrase, leave it blank.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The results of running the command should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ssh-keygen
Generating&lt;span class="w"&gt; &lt;/span&gt;public/private&lt;span class="w"&gt; &lt;/span&gt;rsa&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;pair.
Enter&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;save&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;/home/jjriv/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;/home/jjriv/.ssh/ubuntu
Enter&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;empty&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter&lt;span class="w"&gt; &lt;/span&gt;same&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="w"&gt; &lt;/span&gt;again:
Your&lt;span class="w"&gt; &lt;/span&gt;identification&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;been&lt;span class="w"&gt; &lt;/span&gt;saved&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/jjriv/.ssh/ubuntu
Your&lt;span class="w"&gt; &lt;/span&gt;public&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;been&lt;span class="w"&gt; &lt;/span&gt;saved&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/jjriv/.ssh/ubuntu.pub
The&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;fingerprint&lt;span class="w"&gt; &lt;/span&gt;is:
SHA256:ApsRGMJE28I9Rp3WfBvfgIokmNvKD5hRP5FYa4Nevq4&lt;span class="w"&gt; &lt;/span&gt;jjriv@lucinda
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that you&amp;rsquo;ve created your private and public key pair, the public key needs to be uploaded to the server. Run the following command and enter your password when prompted. Be sure to use the username and IP for your server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jjriv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jjriv&lt;/span&gt;&lt;span class="mf"&gt;@1.2.3.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To verify your key is working, log in with it using the command below. If it was successful, you will be logged in without being asked to enter a password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jjriv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jjriv&lt;/span&gt;&lt;span class="mf"&gt;@1.2.3.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Configure SSH to Prevent Password and Root Login&lt;/h3&gt;
&lt;p&gt;As mentioned above, password based logins are insecure. Therefore, we want to configure the server to not allow anyone to log in with anything other than a key. We also want to make it so that the root user can not log in. Here&amp;rsquo;s how.&lt;/p&gt;
&lt;p&gt;Create a sshd config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vim /etc/ssh/sshd_config.d/lockdown.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following two directives. THe first one tells the server to not let the root user log in. The second one tells the sever not to allow any password based logins.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PermitRootLogin no
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then restart sshd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Configure the Server&amp;rsquo;s Firewall with UFW&lt;/h3&gt;
&lt;p&gt;UFW stands for &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu"&gt;Uncomplicated Firewall&lt;/a&gt;. It&amp;rsquo;s the default firewall configuration tool for Ubuntu and was created to make security more user friendly. It works by walling off your server from all public access, except for the doors you allow it to keep open. &lt;/p&gt;
&lt;p&gt;UFW is turned off by default. We want to configure it so that it&amp;rsquo;s automatically enabled and blocking every point of entry except one, SSH.&lt;/p&gt;
&lt;p&gt;To accomplish that, we&amp;rsquo;ll add a rule that allows SSH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo ufw allow ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we&amp;rsquo;ve created a firewall rule for SSH, let&amp;rsquo;s enable UFW:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ufw enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that you&amp;rsquo;ve disallowed root login, disallowed password authentication, and configured UFW, your server can only be accessed by someone with your username and key. This reduces the number of attack vectors exponentially.&lt;/p&gt;
&lt;h3&gt;Step 5: Update the Server&lt;/h3&gt;
&lt;p&gt;Keeping your server updated is equally as important for keeping it safe. Ubuntu will automatically apply any security patches by default. However, it&amp;rsquo;s best practice to regularly update all of the packages installed on your server.&lt;/p&gt;
&lt;p&gt;To do this, we just need to run the package manager update with the following two commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 6: Set the Hostname and Timezone&lt;/h3&gt;
&lt;p&gt;Now that the server is secured we can tailor it by setting the hostname and timezone. To set the hostname, run this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hostnamectl set-hostname myhost.jjriv.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then change the timezone to your location:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;timedatectl set-timezone America/Los_Angeles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Keep Security in Mind Going Forward&lt;/h3&gt;
&lt;p&gt;Now that your server is configured and secure, it&amp;rsquo;s important to maintain a security mindset going forward. As you add more services, such as a web server, you&amp;rsquo;ll be opening up more than just a port. The service running on that port will also be exposed, including any vulnerabilities and misconfigurations it may have. Be sure to research and implement best practices for each and every service you install to keep your server secure.&lt;/p&gt;</content><category term="articles"></category><category term="Linux"></category><category term="Ubuntu"></category><category term="Security"></category></entry><entry><title>A Simplified Explanation of DMARC</title><link href="https://jjriv.com/articles/dmarc-simplified/" rel="alternate"></link><published>2024-05-28T00:00:00-07:00</published><updated>2024-05-28T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-05-28:/articles/dmarc-simplified/</id><summary type="html">&lt;p&gt;To help understand how DMARC compliance works, and why SPF and/or DKIM alignment is necessary, I find that a postal service analogy works best.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is DMARC?&lt;/h2&gt;
&lt;p&gt;DMARC, which stands for &lt;a href="https://dmarc.org/"&gt;Domain-based Message Authentication, Reporting &amp;amp; Conformance&lt;/a&gt;, is an email authentication protocol designed to give email senders the ability to prove ownership of their domain. &lt;/p&gt;
&lt;p&gt;To be DMARC compliant, an email sender must correctly implement at least one of two protocols — SPF (&lt;a href="https://postmarkapp.com/guides/spf"&gt;Sender Policy Framework&lt;/a&gt;) and DKIM (&lt;a href="https://postmarkapp.com/guides/dkim"&gt;DomainKeys Identified Mail&lt;/a&gt;). Now that we've gotten all the acronyms out of the way, let's move on to why DMARC is important. &lt;/p&gt;
&lt;p&gt;The simple truth is that email senders who are not DMARC compliant will find their emails &lt;a href="https://meetmarigold.com/blogs/2024-guide-to-google-yahoos-new-privacy-protections/"&gt;blocked by Gmail and Yahoo&lt;/a&gt;, and junked by many other mail providers. &lt;/p&gt;
&lt;p&gt;SPF and DKIM are two different methodologies, however, they have the same outcome. When implemented correctly they provide proof that your emails were sent by you, not an impostor. &lt;/p&gt;
&lt;p&gt;To help understand how they work, and why they are important, I find that a postal service analogy works best. Let's assume you want to mail a letter to one of your customers the old fashioned way, with an envelope and a stamp. Here's how SPF and DKIM would help ensure it gets delivered.&lt;/p&gt;
&lt;h2&gt;SPF&lt;/h2&gt;
&lt;p&gt;SPF provides a way for you to broadcast the address of your local post office to your customer, designating them as a safe deliverer. When you drop off the letter for delivery, the postal clerk stamps the envelope with their address. This allows your customer's mail person to verify your letter before putting it in their mailbox by comparing the stamped address on the envelope with the address you've made public. &lt;/p&gt;
&lt;p&gt;However, there is a loophole that a bad actor could easily exploit. Because you've broadcasted the address of your local post office, anyone can send a letter on your behalf simply by dropping it off at the same location. To prevent this from happening, your letter must also be authenticated by the post office using a method called SPF alignment.&lt;/p&gt;
&lt;p&gt;To authenticate your letter, the postal clerk first checks your identification. Once they've verified you as the rightful sender, they use a different stamp — one that still includes their address, but is unique to you. Before your customer's mail person drops off your letter they will now perform two checks. In addition to verifying that the stamped address matches the address you broadcasted, they will also make sure the stamp is the same unique one used by your local post office. &lt;/p&gt;
&lt;p&gt;With SPF alignment implemented correctly, the letter can't be sent by anyone other than you. &lt;/p&gt;
&lt;h2&gt;DKIM&lt;/h2&gt;
&lt;p&gt;DKIM is similar to SPF. But, instead of broadcasting the post office address, you broadcast a sample of your handwriting. When you drop off the letter for delivery, you sign the envelope with your signature. Your customer's mail deliverer then compares your signature to the publicly available handwriting sample, verifying that they are a match before delivering your letter. When your signature matches, the letter is considered to be DKIM aligned.&lt;/p&gt;
&lt;p&gt;If you drop off a letter without signing it, the postal clerk instead signs the envelope with her own signature that matches her broadcasted handwriting sample. Just like we saw with SPF, a bad actor could exploit this loophole by dropping off an unsigned letter at your local post office. Because the postal clerk's signature and handwriting sample are a match, the letter will pass DKIM. However, it won't be in alignment because it's not your signature. &lt;/p&gt;
&lt;h2&gt;A passing grade is not good enough&lt;/h2&gt;
&lt;p&gt;This illustrates why getting a passing grade on SPF and/or DKIM is not enough —one of them has to be in alignment. Without alignment, your customer's email provider can't verify you are who you say you are. And if they refuse to deliver unauthenticated messages, like Google and Yahoo are, your message will never make it to your customer's mailbox.&lt;/p&gt;
&lt;p&gt;DKIM alignment is the easier of the two protocols to implement. To implement DKIM alignment, check your Email Service Provider's documentation. Most ESPs have instructions that will walk you through the process of authenticating your domain and configuring DKIM. &lt;/p&gt;</content><category term="articles"></category><category term="DMARC"></category></entry><entry><title>How to Configure Wildcard Subdomains and Virtual Mailboxes in Postfix</title><link href="https://jjriv.com/articles/postfix-wildcard-subdomains-virtual-mailboxes/" rel="alternate"></link><published>2024-05-28T00:00:00-07:00</published><updated>2024-05-28T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-05-28:/articles/postfix-wildcard-subdomains-virtual-mailboxes/</id><summary type="html">&lt;p&gt;A tutorial on how to configure Postfix mail server to receive messages addressed to any recipient and subdomain.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;This tutorial teaches you how to configure a &lt;a href="https://www.postfix.org/"&gt;Postfix&lt;/a&gt; mail server to receive messages addressed to any recipient and subdomain at your domain. &lt;/p&gt;
&lt;p&gt;A common use case for this configuration is a web-based software that receives emails intended for its users. For example, the mail server would accept delivery for messages sent to hello@jane.doe.com and hi@john.doe.com. The messages are then stored by Postfix in a single mailbox for further processing. &lt;/p&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;h3&gt;Step 1: Configure DNS&lt;/h3&gt;
&lt;p&gt;DNS takes a while to propagate, so set this up first. We need to create A and MX records for your domain. You will need to know the IP address of your mail server. It should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;
&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;TTL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="nx"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;1.2.3.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MX&lt;/span&gt;
&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;TTL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test if the DNS updates for the these records have propagated to your servers, run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;dig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;QUESTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;IN&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;

&lt;span class="o"&gt;;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ANSWER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;IN&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;dig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;MX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;subdomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;QUESTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;subdomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;IN&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MX&lt;/span&gt;

&lt;span class="o"&gt;;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ANSWER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;subdomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;IN&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;MX&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Create a user and group for sharing read and write access to the mailbox&lt;/h3&gt;
&lt;p&gt;Postfix will store incoming emails in a single text-based mailbox file on the server. We need to create a user and group and assign them ownership of the file, so that both our Postfix server and web application can access the same mailbox. &lt;/p&gt;
&lt;p&gt;First, create a group called vmail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;groupadd -g 5000 vmail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, we create a user belonging to the vmail group, with no login access and the mail directory as its home.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;useradd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;span class="n"&gt;usermod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;span class="n"&gt;usermod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nologin&lt;/span&gt;
&lt;span class="n"&gt;usermod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;aG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third, we create the mailbox file, give ownership of it to our newly created vmail user, and set the permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;span class="n"&gt;chown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;span class="n"&gt;chmod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0660&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you are finished, you should see something like this in the &lt;code&gt;/var/mail&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-rw-rw----  1 vmail vmail  556 Mar 13 13:03 vmail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Grant mailbox access to the cron user (optional)&lt;/h3&gt;
&lt;p&gt;If your web application will be acessing the mailbox through a scheduled cron, you need to add the cron user to the vmail group, which will grant it read/write access. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;usermod -aG vmail cronuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, Linux distributions, such as Ubuntu, will block the cron user from accessing a virtual mailbox file outside of its home directory due to security restrictions. To resolve this we add a symbolic link in the cron user&amp;rsquo;s home directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ln&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cronuser&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Configure Postfix to handle virtual subdomains&lt;/h3&gt;
&lt;p&gt;The final step is to configure Postfix to accept email being sent to wildcard virtual subdomains. To accomplish this we use the virtual mailbox features of postfix and a few regular expressions to enable wildcards for our subdomains.&lt;/p&gt;
&lt;p&gt;First, use your favorite text editor and create the virtual mailbox domains file &lt;code&gt;/etc/postfix/vdomains&lt;/code&gt;. This file contains the regular expression for matching the recipient&amp;rsquo;s email subdomain to a valid virtual domain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/((\w[\w\-]*)\.)+example\.com/ OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, create the virtual mailbox maps file &lt;code&gt;/etc/postfix/vmailbox&lt;/code&gt;. This file contains the regular expression needed to map the wildcard domain to our virtual mailbox.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/@((\w[\w\-]*)\.)+example\.com/ vmail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third, run the following commands to update the Postfix configuration. These changes instruct Postfix to use the domains and maps files for parsing and delivering mail to our virtual mailbox file. They also establish ownership of our virtual mailbox file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_mailbox_domains = pcre:/etc/postfix/vdomains&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_mailbox_base = /var/mail&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_mailbox_maps = pcre:/etc/postfix/vmailbox&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_minimum_uid = 5000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_uid_maps = static:5000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_gid_maps = static:5000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_mailbox_limit = 0&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;postconf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtual_mailbox_lock = fcntl&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: The virtual_mailbox_limit is set to zero here to denote that the mailbox filesize should not be restricted. You can set this value to whatever you would like.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finally, create a lookup table file for the virtual domains and maps and then reload postfix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;postmap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vdomains&lt;/span&gt;
&lt;span class="n"&gt;postmap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vmailbox&lt;/span&gt;
&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s it! Emails should start arriving on the server, assuming DNS has propagated. It&amp;rsquo;s up to you what you do next. For web applications that utilize a scheduled cron look into the IMAP libraries available for the scripting language you are using.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;I could not have figured any of this out without others having already done most of the work. Here is a list of articles, forum discussions, and general documentation that helped me out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.postfix.org/VIRTUAL_README.html"&gt;Postfix Virtual Domain Hosting Howto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postfix.org/pcre_table.5.html"&gt;pcre_table – format of Postfix PCRE tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.c3.hu/docs/oreilly/tcpip/sendmail/ch21_03.htm#SML2-CH-21-SECT-3-4"&gt;DNS and sendmail: 21.3.4 Wildcard MX Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Wildcard_DNS_record"&gt;Wildcard Records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;If the mail server is behind a firewall, you will need to open up port 25 so that postfix can receive mail. &lt;/li&gt;
&lt;li&gt;This post assumes you already have Postfix installed, secured, and sending emails.&lt;/li&gt;
&lt;li&gt;We are using PCRE for the regular expression matching, which requires a replacment string. Since the vdomains file is only looking for a match, we can use any arbitrary replacement string. In our example, we simply use &amp;ldquo;OK.&amp;rdquo; An empty string works as well. If the replacement string is not specified, the pattern matching will still work, however, warnings will show up in the mail logs.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;d like to filter and reject certain incoming emails, the &lt;a href="https://www.postfix.org/header_checks.5.html"&gt;header_checks&lt;/a&gt; configuration parameter is a great place to start.&lt;/li&gt;
&lt;/ol&gt;</content><category term="articles"></category><category term="Linux"></category><category term="postfix"></category></entry><entry><title>How to Configure and Deploy Subversion Server on Ubuntu</title><link href="https://jjriv.com/articles/subversion-server/" rel="alternate"></link><published>2024-05-05T00:00:00-07:00</published><updated>2024-05-05T00:00:00-07:00</updated><author><name>jjriv</name></author><id>tag:jjriv.com,2024-05-05:/articles/subversion-server/</id><summary type="html">&lt;p&gt;This tutorial shows you how to configure Apache to run as a Subversion server on the Ubuntu Linux operating system.&lt;/p&gt;</summary><content type="html">&lt;!-- Status: draft --&gt;

&lt;p&gt;Subversion is an open source version control system developed by Apache since the year 2000. Even though it&amp;rsquo;s been largely overshadowed by Git, the &lt;a href="https://subversion.apache.org/"&gt;Subversion software project&lt;/a&gt; is still &lt;a href="https://get.assembla.com/blog/apache-subversion-still-used/"&gt;widely used&lt;/a&gt;. Subversion is an ideal choice for companies that have strict compliance and security standards. In other words, companies that want full control of their version control.   &lt;/p&gt;
&lt;p&gt;This tutorial teaches you how to install and configure Subversion server on the Ubuntu operating system.&lt;/p&gt;
&lt;h3&gt;Step 1: Install the Apache and Subversion packages&lt;/h3&gt;
&lt;p&gt;Run the following commands to install Apache and Subversion.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt install apache2
apt install subversion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Enable Apache DAV modules&lt;/h3&gt;
&lt;p&gt;The DAV modules are necessary to enable WebDAV, which is a set of extensions to the HTTP protocol which allow users to collaboratively edit and manage files on a web server. Use the apache &lt;code&gt;a2enmod&lt;/code&gt; command to enable the dav modules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;a2enmod dav
a2enmod dav_fs
a2enmod dav_svn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Configure the Subversion Virtual Host&lt;/h3&gt;
&lt;p&gt;Create the following file:&lt;br&gt;
&lt;code&gt;/etc/apache2/sites-available/subversion.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add the following virtual host configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;mod_ssl.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ServerName&lt;span class="w"&gt; &lt;/span&gt;jjriv.com
&lt;span class="w"&gt;    &lt;/span&gt;DocumentRoot&lt;span class="w"&gt; &lt;/span&gt;/var/www/html
&lt;span class="w"&gt;    &lt;/span&gt;KeepAlive&lt;span class="w"&gt; &lt;/span&gt;On
&lt;span class="w"&gt;    &lt;/span&gt;MaxKeepAliveRequests&lt;span class="w"&gt;  &lt;/span&gt;1000
&lt;span class="w"&gt;    &lt;/span&gt;KeepAliveTimeout&lt;span class="w"&gt; &lt;/span&gt;15
&lt;span class="w"&gt;    &lt;/span&gt;CustomLog&lt;span class="w"&gt; &lt;/span&gt;/var/log/apache2/svn_logfile&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;%t&lt;span class="w"&gt; &lt;/span&gt;%u&lt;span class="w"&gt; &lt;/span&gt;%{SVN-ACTION}e&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;env=SVN-ACTION
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ServerName&lt;span class="w"&gt; &lt;/span&gt;jjriv.com
&lt;span class="w"&gt;    &lt;/span&gt;DocumentRoot&lt;span class="w"&gt; &lt;/span&gt;/var/www/html
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Secure the Subversion Virtual Host&lt;/h3&gt;
&lt;p&gt;Since DAV access allows users to manipulate files on the server, you must assure that your server is secure. The virtual host should be protected by authentication. &lt;a href="https://httpd.apache.org/docs/2.4/mod/mod_dav.html#security"&gt;HTTP Digest Authentication is the preferred method&lt;/a&gt;. However, Basic Authentication is acceptable if the site is accessed over an SSL enabled connection.&lt;/p&gt;
&lt;p&gt;Add the following configuration to your config file:&lt;br&gt;
&lt;code&gt;/etc/apache2/sites-available/subversion.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/svn&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;DAV&lt;span class="w"&gt; &lt;/span&gt;svn
&lt;span class="w"&gt;  &lt;/span&gt;SVNParentPath&lt;span class="w"&gt; &lt;/span&gt;/var/svn

&lt;span class="w"&gt;  &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;Authentication:&lt;span class="w"&gt; &lt;/span&gt;Digest
&lt;span class="w"&gt;  &lt;/span&gt;AuthName&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Subversion&lt;span class="w"&gt; &lt;/span&gt;repository&amp;quot;
&lt;span class="w"&gt;  &lt;/span&gt;AuthType&lt;span class="w"&gt; &lt;/span&gt;Digest
&lt;span class="w"&gt;  &lt;/span&gt;AuthDigestProvider&lt;span class="w"&gt; &lt;/span&gt;file
&lt;span class="w"&gt;  &lt;/span&gt;AuthUserFile&lt;span class="w"&gt; &lt;/span&gt;/etc/svn-auth.htdigest

&lt;span class="w"&gt;  &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;Authorization:&lt;span class="w"&gt; &lt;/span&gt;Authenticated&lt;span class="w"&gt; &lt;/span&gt;users&lt;span class="w"&gt; &lt;/span&gt;only
&lt;span class="w"&gt;  &lt;/span&gt;Require&lt;span class="w"&gt; &lt;/span&gt;valid-user
&lt;span class="nt"&gt;&amp;lt;/Location&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above configuration will read in a file containing usernames and encrypted passwords. That file can be created using the following command. The first time you run it, you need to use the &lt;code&gt;-c&lt;/code&gt; option to instruct htdigest to create a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;htdigest&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;/etc/svn-auth.htdigest&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Subversion repository&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jjriv
Adding&lt;span class="w"&gt; &lt;/span&gt;password&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jjriv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;realm&lt;span class="w"&gt; &lt;/span&gt;Subversion&lt;span class="w"&gt; &lt;/span&gt;repository.
New&lt;span class="w"&gt; &lt;/span&gt;password:&lt;span class="w"&gt; &lt;/span&gt;*****
Re-type&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;password:&lt;span class="w"&gt; &lt;/span&gt;*****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To add more users, run htdigest without the create option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;htdigest&lt;span class="w"&gt; &lt;/span&gt;/etc/svn-auth.htdigest&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Subversion repository&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;john
Adding&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;john&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;realm&lt;span class="w"&gt; &lt;/span&gt;Subversion&lt;span class="w"&gt; &lt;/span&gt;repository
New&lt;span class="w"&gt; &lt;/span&gt;password:&lt;span class="w"&gt; &lt;/span&gt;*******
Re-type&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;password:&lt;span class="w"&gt; &lt;/span&gt;*******
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 5: Configure the Firewall&lt;/h3&gt;
&lt;p&gt;Assuming you've secured your server already, you will need to open up ports for http and https. Run the following command to update the firewall using the UFW utility.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ufw allow http
ufw allow http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 6: Reload Apache&lt;/h3&gt;
&lt;p&gt;The next step is to load all of our configuration changes by reloading Apache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apache2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 7: Install SSL Certificate from Let&amp;rsquo;s Encrypt&lt;/h3&gt;
&lt;p&gt;For the Subversion server to be secure it needs to have a SSL certificate installed and redirect all http traffic to https. Fortunately, &lt;a href="https://certbot.eff.org"&gt;certbot&lt;/a&gt; from &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; makes this really easy.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://certbot.eff.org/instructions?ws=apache&amp;amp;os=ubuntufocal"&gt;install certbot using the Apache / Ubuntu instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, run the following command and answer the prompts to create your certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;certbot --apache -d jjriv.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install the certificate, configure the redirect, and restart Apache. You can use curl to verify that it completed successfully.&lt;/p&gt;
&lt;p&gt;To verify the http to https redirect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;http://jjriv.com
HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;301&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Moved&lt;span class="w"&gt; &lt;/span&gt;Permanently
Date:&lt;span class="w"&gt; &lt;/span&gt;Thu,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jun&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;:51:52&lt;span class="w"&gt; &lt;/span&gt;GMT
Server:&lt;span class="w"&gt; &lt;/span&gt;Apache
Location:&lt;span class="w"&gt; &lt;/span&gt;https://jjriv.com/
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To verify the certificate (this command will fail if the cert is not installed correctly):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;https://jjriv.com
HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;401&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Unauthorized
Date:&lt;span class="w"&gt; &lt;/span&gt;Thu,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jun&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;:52:38&lt;span class="w"&gt; &lt;/span&gt;GMT
Server:&lt;span class="w"&gt; &lt;/span&gt;Apache
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, point your browser at your domain and log in using the credentials you created. If you&amp;rsquo;re not sure what to do next, start by reading the &lt;a href="https://svnbook.red-bean.com/en/1.7/svn.tour.importing.html"&gt;Getting Data into Your Repository&lt;/a&gt; chapter of the Subversion book.&lt;/p&gt;</content><category term="articles"></category><category term="Linux"></category><category term="Ubuntu"></category><category term="Version Control"></category><category term="Subversion"></category></entry></feed>